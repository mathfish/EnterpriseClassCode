SET DATABASE UNIQUE NAME HSQLDB578240EBF3
SET DATABASE GC 0
SET DATABASE DEFAULT RESULT MEMORY ROWS 0
SET DATABASE EVENT LOG LEVEL 0
SET DATABASE TRANSACTION CONTROL LOCKS
SET DATABASE DEFAULT ISOLATION LEVEL READ COMMITTED
SET DATABASE TRANSACTION ROLLBACK ON CONFLICT TRUE
SET DATABASE TEXT TABLE DEFAULTS ''
SET DATABASE SQL NAMES FALSE
SET DATABASE SQL REFERENCES FALSE
SET DATABASE SQL SIZE TRUE
SET DATABASE SQL TYPES FALSE
SET DATABASE SQL TDC DELETE TRUE
SET DATABASE SQL TDC UPDATE TRUE
SET DATABASE SQL TRANSLATE TTI TYPES TRUE
SET DATABASE SQL TRANSLATE TTI TYPES TRUE
SET DATABASE SQL CONCAT NULLS TRUE
SET DATABASE SQL UNIQUE NULLS TRUE
SET DATABASE SQL CONVERT TRUNCATE TRUE
SET DATABASE SQL AVG SCALE 0
SET DATABASE SQL DOUBLE NAN TRUE
SET FILES WRITE DELAY 500 MILLIS
SET FILES BACKUP INCREMENT TRUE
SET FILES CACHE SIZE 10000
SET FILES CACHE ROWS 50000
SET FILES SCALE 32
SET FILES LOB SCALE 32
SET FILES DEFRAG 0
SET FILES NIO TRUE
SET FILES NIO SIZE 256
SET FILES LOG TRUE
SET FILES LOG SIZE 50
CREATE USER SA PASSWORD DIGEST 'd41d8cd98f00b204e9800998ecf8427e'
ALTER USER SA SET LOCAL TRUE
CREATE SCHEMA PUBLIC AUTHORIZATION DBA
SET SCHEMA PUBLIC
CREATE MEMORY TABLE PUBLIC.BRANCH(BRANCHID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,NAME VARCHAR(50) NOT NULL,CITY VARCHAR(50) NOT NULL,ZIPCODE INTEGER NOT NULL,STREETADDRESS VARCHAR(150) NOT NULL,STATE VARCHAR(2) NOT NULL,CONSTRAINT BRANCH_ZIPCODE_NOT_5_DIGITS CHECK((PUBLIC.BRANCH.ZIPCODE>9999) AND (PUBLIC.BRANCH.ZIPCODE<100000)),CONSTRAINT BRANCH_STATE_NOT_2_CHARS CHECK(CHAR_LENGTH(PUBLIC.BRANCH.STATE)=2))
ALTER TABLE PUBLIC.BRANCH ALTER COLUMN BRANCHID RESTART WITH 3
CREATE MEMORY TABLE PUBLIC.AUTHOR(AUTHORID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,FIRSTNAME VARCHAR(50) NOT NULL,LASTNAME VARCHAR(50) NOT NULL,COUNTRY VARCHAR(50))
ALTER TABLE PUBLIC.AUTHOR ALTER COLUMN AUTHORID RESTART WITH 3
CREATE MEMORY TABLE PUBLIC.ARTIST(ARTISTID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,FIRSTNAME VARCHAR(50),LASTNAME VARCHAR(50))
ALTER TABLE PUBLIC.ARTIST ALTER COLUMN ARTISTID RESTART WITH 3
CREATE MEMORY TABLE PUBLIC.BAND(BANDID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,NAME VARCHAR(50) NOT NULL,COUNTRY VARCHAR(50))
ALTER TABLE PUBLIC.BAND ALTER COLUMN BANDID RESTART WITH 2
CREATE MEMORY TABLE PUBLIC.THESPIAN(THESPIANID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,FIRSTNAME VARCHAR(50) NOT NULL,LASTNAME VARCHAR(50) NOT NULL,COUNTRY VARCHAR(50))
ALTER TABLE PUBLIC.THESPIAN ALTER COLUMN THESPIANID RESTART WITH 3
CREATE MEMORY TABLE PUBLIC.BOOK(BOOKID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,TITLE VARCHAR(100) NOT NULL,BOOKYEAR INTEGER NOT NULL,DESCRIPTION VARCHAR(255),CONSTRAINT BOOK_YEAR_NOT_4_DIGITS CHECK((PUBLIC.BOOK.BOOKYEAR>999) AND (PUBLIC.BOOK.BOOKYEAR<10000)))
ALTER TABLE PUBLIC.BOOK ALTER COLUMN BOOKID RESTART WITH 3
CREATE MEMORY TABLE PUBLIC.BOOKBYAUTHOR(AUTHORID INTEGER NOT NULL,BOOKID INTEGER NOT NULL,PRIMARY KEY(AUTHORID,BOOKID),CONSTRAINT FK_AUTHORID FOREIGN KEY(AUTHORID) REFERENCES PUBLIC.AUTHOR(AUTHORID),CONSTRAINT FK_BOOKID FOREIGN KEY(BOOKID) REFERENCES PUBLIC.BOOK(BOOKID))
CREATE MEMORY TABLE PUBLIC.CD(CDID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,TITLE VARCHAR(50) NOT NULL,NUMOFTRACKS INTEGER NOT NULL,CDYEAR INTEGER NOT NULL,CONSTRAINT CD_YEAR_NOT_4_DIGITS CHECK((PUBLIC.CD.CDYEAR>999) AND (PUBLIC.CD.CDYEAR<10000)))
ALTER TABLE PUBLIC.CD ALTER COLUMN CDID RESTART WITH 3
CREATE MEMORY TABLE PUBLIC.CDBYARTISTORBAND(CDARTISTBANDID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,ARTISTID INTEGER,BANDID INTEGER,CDID INTEGER NOT NULL,CONSTRAINT ARTIST_OR_BAND_ID_NOT_NULL CHECK((PUBLIC.CDBYARTISTORBAND.ARTISTID IS NOT NULL) OR (PUBLIC.CDBYARTISTORBAND.BANDID IS NOT NULL)),CONSTRAINT FK_BANDID FOREIGN KEY(BANDID) REFERENCES PUBLIC.BAND(BANDID),CONSTRAINT FK_ARTISTID FOREIGN KEY(ARTISTID) REFERENCES PUBLIC.ARTIST(ARTISTID),CONSTRAINT FK_CDID FOREIGN KEY(CDID) REFERENCES PUBLIC.CD(CDID))
ALTER TABLE PUBLIC.CDBYARTISTORBAND ALTER COLUMN CDARTISTBANDID RESTART WITH 3
CREATE MEMORY TABLE PUBLIC.DVD(DVDID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,TITLE VARCHAR(50) NOT NULL,FILMYEAR INTEGER NOT NULL,RATING VARCHAR(4) NOT NULL,TIMELENGTH TIME,CONSTRAINT DVD_YEAR_NOT_4_DIGITS CHECK((PUBLIC.DVD.FILMYEAR>999) AND (PUBLIC.DVD.FILMYEAR<10000)),CONSTRAINT RATING_NOT_CORRECT CHECK((PUBLIC.DVD.RATING) IN (('G'),('PG'),('PG13'),('R'),('NR'))))
ALTER TABLE PUBLIC.DVD ALTER COLUMN DVDID RESTART WITH 3
CREATE MEMORY TABLE PUBLIC.DVDBYTHESPIAN(DVDID INTEGER NOT NULL,THESPIANID INTEGER NOT NULL,PRIMARY KEY(DVDID,THESPIANID),CONSTRAINT FK_DVDID FOREIGN KEY(DVDID) REFERENCES PUBLIC.DVD(DVDID),CONSTRAINT FK_THESPIANID FOREIGN KEY(THESPIANID) REFERENCES PUBLIC.THESPIAN(THESPIANID))
CREATE MEMORY TABLE PUBLIC.BRANCHITEM(BRANCHITEMID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,BRANCHID INTEGER NOT NULL,CHECKEDOUT BOOLEAN DEFAULT FALSE,RESERVED BOOLEAN DEFAULT FALSE,INTRANSIT BOOLEAN DEFAULT FALSE,CURRENTLOCATION INTEGER NOT NULL,CONSTRAINT FK_BRANCHITEM_BRANCH FOREIGN KEY(BRANCHID) REFERENCES PUBLIC.BRANCH(BRANCHID),CONSTRAINT FK_BRANCHITEM_CURRENTLOCATION FOREIGN KEY(CURRENTLOCATION) REFERENCES PUBLIC.BRANCH(BRANCHID))
ALTER TABLE PUBLIC.BRANCHITEM ALTER COLUMN BRANCHITEMID RESTART WITH 16
CREATE MEMORY TABLE PUBLIC.BRANCHBOOK(BRANCHBOOKID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,BRANCHITEMID INTEGER NOT NULL,BOOKID INTEGER NOT NULL,CONSTRAINT FK_BRANCHBOOK_BRANCHITEM FOREIGN KEY(BRANCHITEMID) REFERENCES PUBLIC.BRANCHITEM(BRANCHITEMID),CONSTRAINT FK_BRANCHBOOK_BOOK FOREIGN KEY(BOOKID) REFERENCES PUBLIC.BOOK(BOOKID))
ALTER TABLE PUBLIC.BRANCHBOOK ALTER COLUMN BRANCHBOOKID RESTART WITH 6
CREATE MEMORY TABLE PUBLIC.BRANCHCD(BRANCHCDID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,BRANCHITEMID INTEGER NOT NULL,CDID INTEGER NOT NULL,CONSTRAINT FK_BRANCHCD_CD FOREIGN KEY(CDID) REFERENCES PUBLIC.CD(CDID),CONSTRAINT FK_BRANCHCD_BRANCHITEM FOREIGN KEY(BRANCHITEMID) REFERENCES PUBLIC.BRANCHITEM(BRANCHITEMID))
ALTER TABLE PUBLIC.BRANCHCD ALTER COLUMN BRANCHCDID RESTART WITH 6
CREATE MEMORY TABLE PUBLIC.BRANCHDVD(BRANCHDVDID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,DVDID INTEGER NOT NULL,BRANCHITEMID INTEGER NOT NULL,CONSTRAINT FK_BRANCHDVD_DVD FOREIGN KEY(DVDID) REFERENCES PUBLIC.DVD(DVDID),CONSTRAINT FK_BRANCHDVD_BRANCHITEM FOREIGN KEY(BRANCHITEMID) REFERENCES PUBLIC.BRANCHITEM(BRANCHITEMID))
ALTER TABLE PUBLIC.BRANCHDVD ALTER COLUMN BRANCHDVDID RESTART WITH 6
CREATE MEMORY TABLE PUBLIC.PATRON(PATRONID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,FIRSTNAME VARCHAR(50) NOT NULL,LASTNAME VARCHAR(50) NOT NULL,CITY VARCHAR(50) NOT NULL,STATE VARCHAR(2) NOT NULL,ZIPCODE INTEGER NOT NULL,STREETADDRESS VARCHAR(150) NOT NULL,JOINDATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,PHONE BIGINT NOT NULL,PASSWORD VARCHAR(10) NOT NULL,REMOTELIBRARY BOOLEAN DEFAULT FALSE,EMAIL VARCHAR(50) NOT NULL,CONSTRAINT PATRON_STATE_NOT_2_CHARS CHECK(CHAR_LENGTH(PUBLIC.PATRON.STATE)=2),CONSTRAINT PATRON_ZIPCODE_NOT_5_DIGITS CHECK((PUBLIC.PATRON.ZIPCODE>9999) AND (PUBLIC.PATRON.ZIPCODE<100000)),CONSTRAINT PHONE_NOT_10_DIGITS CHECK((PUBLIC.PATRON.PHONE>999999999) AND (PUBLIC.PATRON.PHONE<10000000000)),CONSTRAINT PATRON_EMAIL_UNIQUE UNIQUE(EMAIL))
ALTER TABLE PUBLIC.PATRON ALTER COLUMN PATRONID RESTART WITH 3
CREATE MEMORY TABLE PUBLIC.RESERVATION(RESERVATIONID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,PATRONID INTEGER NOT NULL,FORBRANCHID INTEGER NOT NULL,BRANCHITEMID INTEGER NOT NULL,RESERVDATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,FULFILLED BOOLEAN DEFAULT FALSE,CONSTRAINT FK_RESERVATION_PATRON FOREIGN KEY(PATRONID) REFERENCES PUBLIC.PATRON(PATRONID),CONSTRAINT FK_RESERVATION_FORBRANCH FOREIGN KEY(FORBRANCHID) REFERENCES PUBLIC.BRANCH(BRANCHID),CONSTRAINT FK_RESERVATION_BRANCHITEM FOREIGN KEY(BRANCHITEMID) REFERENCES PUBLIC.BRANCHITEM(BRANCHITEMID))
ALTER TABLE PUBLIC.RESERVATION ALTER COLUMN RESERVATIONID RESTART WITH 5
CREATE MEMORY TABLE PUBLIC.CHECKOUT(CHECKOUTID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,PATRONID INTEGER NOT NULL,CHECKOUTDATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,NUMBEROFITEMS INTEGER NOT NULL,OVERDUE BOOLEAN DEFAULT FALSE,ITEMSRETURNED BOOLEAN DEFAULT FALSE,CONSTRAINT FK_CHECKOUT_PATRON FOREIGN KEY(PATRONID) REFERENCES PUBLIC.PATRON(PATRONID))
ALTER TABLE PUBLIC.CHECKOUT ALTER COLUMN CHECKOUTID RESTART WITH 4
CREATE MEMORY TABLE PUBLIC.BRANCHITEMCHECKOUT(BRANCHITEMID INTEGER NOT NULL,CHECKOUTID INTEGER NOT NULL,OVERDUE BOOLEAN DEFAULT FALSE,DUEDATE DATE NOT NULL,RENEW BOOLEAN DEFAULT FALSE,RENEWDATE DATE,RETURNED BOOLEAN DEFAULT FALSE,RETURNDATE DATE,PRIMARY KEY(BRANCHITEMID,CHECKOUTID),CONSTRAINT FK_BRANCHITEMCHECKOUT_BRANCHITEM FOREIGN KEY(BRANCHITEMID) REFERENCES PUBLIC.BRANCHITEM(BRANCHITEMID),CONSTRAINT FK_BRANCHITEMCHECKOUT_CHECKOUT FOREIGN KEY(CHECKOUTID) REFERENCES PUBLIC.CHECKOUT(CHECKOUTID))
CREATE MEMORY TABLE PUBLIC.TRANSFER(TRANSFERID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,TOBRANCHID INTEGER NOT NULL,FROMBRANCHID INTEGER NOT NULL,RESERVATIONID INTEGER NOT NULL,BRANCHITEMID INTEGER NOT NULL,PATRONID INTEGER NOT NULL,TRANSFERDATE TIMESTAMP NOT NULL,CONSTRAINT TRANSFER_TOBRANCH FOREIGN KEY(TOBRANCHID) REFERENCES PUBLIC.BRANCH(BRANCHID),CONSTRAINT TRANSFER_FROMBRANCH FOREIGN KEY(FROMBRANCHID) REFERENCES PUBLIC.BRANCH(BRANCHID),CONSTRAINT TRANSFER_RESERVATION FOREIGN KEY(RESERVATIONID) REFERENCES PUBLIC.RESERVATION(RESERVATIONID),CONSTRAINT TRANSFER_PATRON FOREIGN KEY(PATRONID) REFERENCES PUBLIC.PATRON(PATRONID),CONSTRAINT TRANSFER__BRANCHITEM FOREIGN KEY(BRANCHITEMID) REFERENCES PUBLIC.BRANCHITEM(BRANCHITEMID))
ALTER TABLE PUBLIC.TRANSFER ALTER COLUMN TRANSFERID RESTART WITH 3
CREATE MEMORY TABLE PUBLIC.FINE(FINEID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,PATRONID INTEGER NOT NULL,CHECKOUTID INTEGER NOT NULL,DATEPAID TIMESTAMP,AMOUNTPAID DECIMAL(10,2),PAID BOOLEAN DEFAULT FALSE,CONSTRAINT FINE_PATRONID FOREIGN KEY(PATRONID) REFERENCES PUBLIC.PATRON(PATRONID),CONSTRAINT FINE_CHECKOUTID FOREIGN KEY(CHECKOUTID) REFERENCES PUBLIC.CHECKOUT(CHECKOUTID))
ALTER TABLE PUBLIC.FINE ALTER COLUMN FINEID RESTART WITH 2
ALTER SEQUENCE SYSTEM_LOBS.LOB_ID RESTART WITH 1
SET DATABASE DEFAULT INITIAL SCHEMA PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.SQL_IDENTIFIER TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.YES_OR_NO TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.TIME_STAMP TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CARDINAL_NUMBER TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CHARACTER_DATA TO PUBLIC
GRANT DBA TO SA
SET SCHEMA SYSTEM_LOBS
INSERT INTO BLOCKS VALUES(0,2147483647,0)
SET SCHEMA PUBLIC
INSERT INTO BRANCH VALUES(1,'north branch','north city',11111,'100 main street','MD')
INSERT INTO BRANCH VALUES(2,'south branch','south city',22222,'20th ave','MD')
INSERT INTO AUTHOR VALUES(1,'earnest','hemmingway','usa')
INSERT INTO AUTHOR VALUES(2,'oscar','wilde','ireland')
INSERT INTO ARTIST VALUES(1,'tom','petty')
INSERT INTO ARTIST VALUES(2,'jon','bon jovi')
INSERT INTO BAND VALUES(1,'bon jovi','usa')
INSERT INTO THESPIAN VALUES(1,'tom','hanks','usa')
INSERT INTO THESPIAN VALUES(2,'audrey','hepburn','british')
INSERT INTO BOOK VALUES(1,'the old man and the sea',1952,'The Old Man and the Sea is a classic that tells the story of a battle between an aging, experienced fisherman, Santiago, and a large marlin')
INSERT INTO BOOK VALUES(2,'de profundis',1890,'A letter written by Oscar Wilde during his imprisonment in Reading Gaol, to "Bosie" (Lord Alfred Douglas)')
INSERT INTO BOOKBYAUTHOR VALUES(1,1)
INSERT INTO BOOKBYAUTHOR VALUES(2,2)
INSERT INTO CD VALUES(1,'wildflowers',15,1994)
INSERT INTO CD VALUES(2,'slippery when wet',10,1986)
INSERT INTO CDBYARTISTORBAND VALUES(1,1,NULL,1)
INSERT INTO CDBYARTISTORBAND VALUES(2,2,1,2)
INSERT INTO DVD VALUES(1,'big',1988,'PG','2:10:00')
INSERT INTO DVD VALUES(2,'my fair lady',1964,'G','2:55:00')
INSERT INTO DVDBYTHESPIAN VALUES(1,1)
INSERT INTO DVDBYTHESPIAN VALUES(2,2)
INSERT INTO BRANCHITEM VALUES(1,1,FALSE,FALSE,FALSE,1)
INSERT INTO BRANCHITEM VALUES(2,1,TRUE,TRUE,FALSE,1)
INSERT INTO BRANCHITEM VALUES(3,2,TRUE,FALSE,FALSE,2)
INSERT INTO BRANCHITEM VALUES(4,1,FALSE,FALSE,FALSE,1)
INSERT INTO BRANCHITEM VALUES(5,2,FALSE,FALSE,FALSE,2)
INSERT INTO BRANCHITEM VALUES(6,1,FALSE,FALSE,FALSE,1)
INSERT INTO BRANCHITEM VALUES(7,1,TRUE,TRUE,FALSE,1)
INSERT INTO BRANCHITEM VALUES(8,2,TRUE,FALSE,FALSE,2)
INSERT INTO BRANCHITEM VALUES(9,1,FALSE,FALSE,FALSE,1)
INSERT INTO BRANCHITEM VALUES(10,2,FALSE,FALSE,FALSE,2)
INSERT INTO BRANCHITEM VALUES(11,1,FALSE,FALSE,FALSE,1)
INSERT INTO BRANCHITEM VALUES(12,1,TRUE,TRUE,FALSE,1)
INSERT INTO BRANCHITEM VALUES(13,2,TRUE,FALSE,FALSE,2)
INSERT INTO BRANCHITEM VALUES(14,1,FALSE,FALSE,FALSE,1)
INSERT INTO BRANCHITEM VALUES(15,2,FALSE,FALSE,FALSE,2)
INSERT INTO BRANCHBOOK VALUES(1,1,1)
INSERT INTO BRANCHBOOK VALUES(2,2,1)
INSERT INTO BRANCHBOOK VALUES(3,3,1)
INSERT INTO BRANCHBOOK VALUES(4,4,2)
INSERT INTO BRANCHBOOK VALUES(5,5,2)
INSERT INTO BRANCHCD VALUES(1,6,1)
INSERT INTO BRANCHCD VALUES(2,7,1)
INSERT INTO BRANCHCD VALUES(3,8,1)
INSERT INTO BRANCHCD VALUES(4,9,2)
INSERT INTO BRANCHCD VALUES(5,10,2)
INSERT INTO BRANCHDVD VALUES(1,1,11)
INSERT INTO BRANCHDVD VALUES(2,1,12)
INSERT INTO BRANCHDVD VALUES(3,1,13)
INSERT INTO BRANCHDVD VALUES(4,2,14)
INSERT INTO BRANCHDVD VALUES(5,2,15)
INSERT INTO PATRON VALUES(1,'john','doe','baltimore','MD',20000,'123 5th street','2016-10-01 18:14:19.698000',1112223333,'1234qwer',FALSE,'jd@email.com')
INSERT INTO PATRON VALUES(2,'mary','jane','laurel','MD',30000,'33 downtown dr','2016-10-01 18:14:19.698000',2222222222,'121212',FALSE,'mj@email.com')
INSERT INTO RESERVATION VALUES(1,1,2,1,'2016-06-01 08:00:00.000000',TRUE)
INSERT INTO RESERVATION VALUES(2,2,1,2,'2016-09-20 08:30:00.000000',FALSE)
INSERT INTO RESERVATION VALUES(3,1,1,7,'2016-09-21 08:45:00.000000',FALSE)
INSERT INTO RESERVATION VALUES(4,1,1,12,'2016-09-24 09:00:00.000000',FALSE)
INSERT INTO CHECKOUT VALUES(1,1,'2016-09-15 08:00:00.000000',3,FALSE,FALSE)
INSERT INTO CHECKOUT VALUES(2,2,'2016-09-16 08:15:00.000000',3,FALSE,FALSE)
INSERT INTO CHECKOUT VALUES(3,1,'2016-06-03 08:30:00.000000',1,TRUE,TRUE)
INSERT INTO BRANCHITEMCHECKOUT VALUES(1,3,TRUE,'2016-07-03',FALSE,NULL,TRUE,'2016-07-04')
INSERT INTO BRANCHITEMCHECKOUT VALUES(2,1,FALSE,'2016-10-15',FALSE,NULL,FALSE,NULL)
INSERT INTO BRANCHITEMCHECKOUT VALUES(3,1,FALSE,'2016-10-15',FALSE,NULL,FALSE,NULL)
INSERT INTO BRANCHITEMCHECKOUT VALUES(7,2,FALSE,'2016-10-16',FALSE,NULL,FALSE,NULL)
INSERT INTO BRANCHITEMCHECKOUT VALUES(8,2,FALSE,'2016-10-16',FALSE,NULL,FALSE,NULL)
INSERT INTO BRANCHITEMCHECKOUT VALUES(11,1,FALSE,'2016-10-15',FALSE,NULL,FALSE,NULL)
INSERT INTO BRANCHITEMCHECKOUT VALUES(12,2,FALSE,'2016-10-16',FALSE,NULL,FALSE,NULL)
INSERT INTO TRANSFER VALUES(1,2,1,1,1,1,'2016-06-01 10:00:00.000000')
INSERT INTO TRANSFER VALUES(2,1,2,1,1,1,'2016-07-05 10:00:00.000000')
INSERT INTO FINE VALUES(1,1,3,'2016-07-10 14:00:00.000000',1.00,TRUE)
